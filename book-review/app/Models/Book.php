<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
// we use builder class from eloquent builder not the query
use Illuminate\Database\Eloquent\Builder;

class Book extends Model
{
    use HasFactory;
    // define 1 to many relationship
    public function reviews()
    {
        return $this->hasMany(Review::class);
    }
    // QUERY SCOPE
    // "query scope" is a way to define reusable constraints for database queries. It allows you to encapsulate certain query conditions into methods on your Eloquent models, making your code more organized and readable. Query scopes are particularly useful for applying common filters or conditions to queries without repeating the same code in multiple places.

    // searching books by a title, we want all the books that will match some specific title,not exact title but books that contain at least a word or part of a word
    // we use where form the query builder, and check title field for something ,we use LIKE operator for that and we encapsulate text between those percent signs, so that only title containing those text are searched. we need to call get at the end of every query that we build using query builder
    // tinker command line code
    // \App\Models\Book::where('title','LIKE',%qui%)->get();



    // we implement here because title is part of book model
    // to define a local query scope you will have to add a method and its name has to be always prefixed with scope
    // now every local query scopes need at least one argument which is the query, so laravel will pass the actual query to this method so we can call some more methods of the query builder 
    // this query argument should be type-hinted using builder class,benefit of that would be we will get some suggestion while we use this query object that will be passed to this method
    // giving return type-hint as builder
    public function scopeTitle(Builder $query, string $title): Builder
    {
        return $query->where('title', 'LIKE', '%' . $title . '%');
    }
    // so we have got our query scope now to use it in tinker we write
    // we just call a method called title,once you run it you get the same effect as writing the above full query
    // even though the scopes are prefixed with the scope word, so method is scope and capital letter title, you use the lower case letter and you skip the scope prefix when calling the query scope

    //App\Models\Book::title('delectus')->get();

    // we want books with specific title but only those that were created after a specific date

    //App\Models\Book::title('delectus')->where('created_at', '>','2023-01-01')->get();

    // to see the actual sql query generated by query builder replace ->get() with ->toSql()
    // "select * from `books` where `title` LIKE ? and `created_at` > ?"
}